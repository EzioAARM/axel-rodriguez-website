{
    "componentChunkName": "component---src-pages-blog-contentful-post-url-js",
    "path": "/blog/como-crear-mi-primera-funcion-lambda/",
    "result": {"data":{"contentfulPost":{"title":"Como crear mi primera función Lambda","body":{"body":"Antes de empezar a desarrollar nuestra primera función usando AWS Lambda hay unos conceptos básicos que debemos entender. Podríamos solo saltar al código, entrar a la consola de AWS y probar nuestra función sin entender nada, pero dentro del mundo del desarrollo de software las cosas no son tan simples, siempre tenemos que resolver algún problema y nos apoyamos en la tecnología para hacerlo, por lo que muchas veces no entender la base de las cosas nos puede perjudicar. Entonces, ¿que debemos saber antes de crear nuestra primera función Lambda?\n\n1. ¿Que es Serverless Computing?\n2. ¿Que es AWS Lambda?\n   Pero para no hacer este Post muy extenso y cansado vamos a asumir que sabes lo básico de Amazon Web Services y que has trabajado con la nube y algún lenguaje de programación como Python o Nodejs.\n\n# ¿Que es Serverless Computing?\n\nTraducido literal al español _Serverless Computing_ es computación sin servidor, y no quiere decir que nuestra aplicación no corra sin ningún servidor, todo servicio que nos da la nube tiene una capa física en su nivel más bajo, en este caso _Serverless Computing_ quiere decir que nosotros, como desarrolladores no vamos a administrar ningún recurso de infraestructura para nuestra aplicación, todos los recursos que requiere nuestro código para ser ejecutado serán administrados por el proveedor, por lo que nosotros nos enfocamos solo en desarrollar bien nuestro código.\n\n# ¿Que es AWS Lambda?\n\nSegún la definición que nos da Amazon Web Services, AWS Lambda es:\n\n> ...un servicio informático sin servidor y basado en eventos que le permite ejecutar código para prácticamente cualquier tipo de aplicación o servicio backend sin necesidad de aprovisionar o administrar servidores.\n\nDentro de esta definición hay algunas cosas que debemos notar, como lo son:\n\n1. Lambda es basado en eventos, esto quiere decir que los recursos necesarios para ejecutar nuestra función se van a aprovisionar solo cuando esta sea invocada desde algún otro lugar, por lo que AWS solo nos va a cobrar por el tiempo que se ejecute nuestra función.\n2. Permite ejecutar código para prácticamente cualquier tipo de aplicación, una función Lambda la podemos integrar con diferentes servicios para usarla en base a nuestras necesidades, algunos ejemplos de esto son:\n    - API Gateway para ejecutar nuestra función desde una API.\n    - Trigger de una tabla de DynamoDB.\n    - Trigger de un bucket de S3.\n    - Un Cron Job con Cloudwatch para ejecutar nuestra función cada cierto tiempo.\n3. No hay necesidad de aprovisionar o administrar servidores, al ser Lambda un servicio administrado por AWS toda la infraestructura en la que funcionará nuestra función es administrada por ellos, entre las ventajas que nos da esto es:\n    - Nuestra función escala en base a la demanda y se ajusta a miles de peticiones por segundo sin problemas.\n    - No nos debemos preocupar por el sistema operativo sobre el que corre o si las versiones del lenguaje son las correctas al momento de migrar al servidor.\n    - Si nuestra función no se ejecuta no nos cobrarán.\n\n## Limitantes de AWS Lambda\n\nLuego de ver que es Lambda debemos saber que tenemos ciertas limitantes que debemos tomar en cuenta para decidir si nuestro proyecto es apto para utilizar esta tecnología o tenemos que ver alguna forma más tradicional de tener nuestra aplicación en la nube. Entre las principales están:\n\n- El tiempo máximo de ejecución de nuestra función es de 15 minutos, si por alguna razón nuestro código tarda más de ese tiempo la ejecución de la función se detiene sin importar la acción que esté realizando.\n- Si vamos a realizar una RestAPI debemos saber que nuestra función se va a llamar desde otro servicio llamado API Gateway que tiene un timeout de 30 segundos, por lo que, aunque la función tenga un máximo de ejecución de 15 minutos nuestra API nos responderá con timeout luego de 30 segundos.\n- Debemos adaptar nuestro desarrollo a la estructura, es algo sencillo pero se debe tomar en cuenta.\n- Hacer pruebas locales no es tan fácil como la forma tradicional con aplicaciones que desarrolamos normalmente (en el caso de Nodejs no es lo mismo realizar un backend con estos servicios de AWS que realizarlo con Express).\n- Debido a que las implementaciones Serverles de funciones como servicio son especificas de cada proveedor de nube es complicado moverse entre distintos proveedores, tendríamos que modificar nuestro código para migrar de AWS a Azure o GCP, por ejemplo.\n\n# ¿Como puedo crear mi primera función?\n\nExisten distintas maneras de crear funciones Lambda, la más sencilla es hacerlo desde la consola de AWS, esto nos creará una función individual.\n\n1. Debemos ingresar a la consola de administración de AWS Lambda [https://us-east-2.console.aws.amazon.com/lambda](https://us-east-2.console.aws.amazon.com/lambda) \n\n![Consola de AWS Lambda](//images.ctfassets.net/vjxxd9nef7ah/4Kl4T1uDgNGS4mMsYKBx0y/e889364da880e6bb4df99087a58505d6/Consola_de_AWS_Lambda.png)\n\n3. Hacemos click en el botón de *Crear Función* (*Create Function* en inglés).\n\n![Boton crear funcion](//images.ctfassets.net/vjxxd9nef7ah/1WUZlk8LPg2lEnXNZizQs1/6ddb497c100b6b9c8f7db08f5390b4af/Boton_crear_funcion.png)\n\n4. En la página de crear función debemos llenar los campos\n    - *Function Name*, para este ejemplo el nombre de nuestra función será ````LambdaTest````.\n    - *Runtime*, este es el lenguaje en el que vamos a desarrollar nuestra función, para este ejemplo usaremos ````Python 3.9````.\n\n![Pagina de crear funcion rellenada](//images.ctfassets.net/vjxxd9nef7ah/50xGZpnQgR3nqARo0NdxXm/c29df9e394720d365568d719a4bbaa34/Pagina_de_crear_funcion_rellenada.png)\n\nPodemos observar que en la parte superior de la consola nos muestra las opciones:\n    - *Author from scratch*: Nos permite crear funciones desde cero, empezaremos con el template de Hello World que provee AWS.\n    - *Use a blueprint*: Nos permite crear una función basada en distintos casos de uso con el código base ya implementado.\n    - *Container image*: En esta opción podemos cargar un Runtime personalizado para poder utilizar el lenguaje que necesitemos y que no se encuentre dentro de los que nos provee AWS.\n    - *Browse serverless app repository*: Esta opción nos permite crear una aplicación completa basada en funciones Lambda (tiene más de una función y puede tener distintos recursos, no solo funciones Lambda).\n\nEn la parte inferior del sitio podemos ver una sección expandible con el texto *Change default execution role*.\n\n![change default execution role](//images.ctfassets.net/vjxxd9nef7ah/3NFxb9dVviaigmtZAuED0l/0a6a2bd861a68a98ab5e5f811fe6b513/change_default_execution_role.png)\n\nAWS nos muestra esta sección debido a que las funciones necesitan tener permisos para poder ejecutarse y para poder acceder a otros servicios (por ejemplo obtener registros de una tabla en DynamoDB, ejecutar otras funciones Lambda, cargar archivos a un bucket de S3, etc), si no le asignamos permisos, por defecto AWS nos creará un rol con los permisos mínimos para ejecutar nuestra función.\n\nEn esta parte tenemos tres opciones:\n  - *Create a new role with basic Lambda permissions*: Es la opción por defecto, que nos permite crear un rol con los permisos básicos para ejecutar la función.\n  - *Use an existing role*: Nos permite seleccionar un rol ya existente.\n  - *Create a new role from AWS policy templates*: Nos permite crear un rol basado en plantillas que tienen definidos permisos para realizar acciones en otros servicios en AWS.\n\nPor el momento dejaremos seleccionada la primera opción para que AWS nos ayude a crear un rol con los permisos básicos para ejecutar nuestra función.\n\n5. Hacemos click en el botón *Create Function*.\n\nAl terminar de crear la función nos mostrará la página principal de nuestra función:\n\n![LambdaTest creada](//images.ctfassets.net/vjxxd9nef7ah/5WY5XHCilHh08Y3Buce9uD/cf4c2fcd051070fd1c80138b97bf66d3/LambdaTest_creada.png)\n"},"heroImage":{"filename":"lambda-logo.png","url":"https://images.ctfassets.net/vjxxd9nef7ah/y8PKvO4al3w9GSsZV72di/2ad753730eb6b9690ceb180a1fb29ad2/lambda-logo.png","title":"AWS Lambda"},"id":"42c094b5-2301-585b-9403-26447b2f58dd","url":"como-crear-mi-primera-funcion-lambda","description":{"description":"Guia para iniciar con el desarrollo en tecnologías Serverless utilizando la nube de AWS."},"keywords":"AWS,LAMBDA,NODEJS,PYTHON"}},"pageContext":{"id":"42c094b5-2301-585b-9403-26447b2f58dd","url":"como-crear-mi-primera-funcion-lambda","__params":{"url":"como-crear-mi-primera-funcion-lambda"}}},
    "staticQueryHashes": []}